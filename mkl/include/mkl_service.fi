!*******************************************************************************
!   Copyright(C) 1999-2013 Intel Corporation. All Rights Reserved.
!
!   The source code, information  and  material ("Material") contained herein is
!   owned  by Intel Corporation or its suppliers or licensors, and title to such
!   Material remains  with Intel Corporation  or its suppliers or licensors. The
!   Material  contains proprietary information  of  Intel or  its  suppliers and
!   licensors. The  Material is protected by worldwide copyright laws and treaty
!   provisions. No  part  of  the  Material  may  be  used,  copied, reproduced,
!   modified, published, uploaded, posted, transmitted, distributed or disclosed
!   in any way  without Intel's  prior  express written  permission. No  license
!   under  any patent, copyright  or  other intellectual property rights  in the
!   Material  is  granted  to  or  conferred  upon  you,  either  expressly,  by
!   implication, inducement,  estoppel or  otherwise.  Any  license  under  such
!   intellectual  property  rights must  be express  and  approved  by  Intel in
!   writing.
!
!   *Third Party trademarks are the property of their respective owners.
!
!   Unless otherwise  agreed  by Intel  in writing, you may not remove  or alter
!   this  notice or  any other notice embedded  in Materials by Intel or Intel's
!   suppliers or licensors in any way.
!
!*******************************************************************************
!  Content:
!      Intel(R) Math Kernel Library (MKL) FORTRAN interface for service routines
!*******************************************************************************

      INTEGER*4 MKL_DOMAIN_ALL
      INTEGER*4 MKL_DOMAIN_BLAS
      INTEGER*4 MKL_DOMAIN_FFT
      INTEGER*4 MKL_DOMAIN_VML
      INTEGER*4 MKL_DOMAIN_PARDISO

      INTEGER*4 MKL_DYNAMIC_TRUE
      INTEGER*4 MKL_DYNAMIC_FALSE
      INTEGER*4 MKL_AVX_ENABLE
      INTEGER*4 MKL_INTERFACE_LP64
      INTEGER*4 MKL_INTERFACE_ILP64
      INTEGER*4 MKL_THREADING_INTEL
      INTEGER*4 MKL_THREADING_SEQUENTIAL
      INTEGER*4 MKL_THREADING_PGI
      INTEGER*4 MKL_THREADING_GNU
      INTEGER*4 MKL_CBWR_BRANCH
      INTEGER*4 MKL_CBWR_ALL
      INTEGER*4 MKL_CBWR_OFF
      INTEGER*4 MKL_CBWR_UNSET_ALL
      INTEGER*4 MKL_CBWR_BRANCH_OFF
      INTEGER*4 MKL_CBWR_AUTO
      INTEGER*4 MKL_CBWR_COMPATIBLE
      INTEGER*4 MKL_CBWR_SSE2
      INTEGER*4 MKL_CBWR_SSE3
      INTEGER*4 MKL_CBWR_SSSE3
      INTEGER*4 MKL_CBWR_SSE4_1
      INTEGER*4 MKL_CBWR_SSE4_2
      INTEGER*4 MKL_CBWR_AVX
      INTEGER*4 MKL_CBWR_AVX2
      INTEGER*4 MKL_CBWR_SUCCESS
      INTEGER*4 MKL_CBWR_ERR_INVALID_SETTINGS
      INTEGER*4 MKL_CBWR_ERR_INVALID_INPUT
      INTEGER*4 MKL_CBWR_ERR_UNSUPPORTED_BRANCH
      INTEGER*4 MKL_CBWR_ERR_UNKNOWN_BRANCH
      INTEGER*4 MKL_CBWR_ERR_MODE_CHANGE_FAILURE
      INTEGER*4 MKL_PEAK_MEM_ENABLE
      INTEGER*4 MKL_PEAK_MEM_RESET
      INTEGER*4 MKL_PEAK_MEM
      INTEGER*4 MKL_PEAK_MEM_DISABLE

      PARAMETER (MKL_DOMAIN_ALL      = 0)
      PARAMETER (MKL_DOMAIN_BLAS     = 1)
      PARAMETER (MKL_DOMAIN_FFT      = 2)
      PARAMETER (MKL_DOMAIN_VML      = 3)
      PARAMETER (MKL_DOMAIN_PARDISO  = 4)
      PARAMETER (MKL_DYNAMIC_TRUE  = 1)
      PARAMETER (MKL_DYNAMIC_FALSE = 0)
      PARAMETER (MKL_AVX_ENABLE = 1)
      PARAMETER (MKL_INTERFACE_LP64 = 0)
      PARAMETER (MKL_INTERFACE_ILP64 = 1)
      PARAMETER (MKL_THREADING_INTEL = 0)
      PARAMETER (MKL_THREADING_SEQUENTIAL = 1)
      PARAMETER (MKL_THREADING_PGI = 2)
      PARAMETER (MKL_THREADING_GNU = 3)

      PARAMETER (MKL_CBWR_BRANCH      = 1)
      PARAMETER (MKL_CBWR_ALL         = -1)

      PARAMETER (MKL_CBWR_OFF         = 0)
      PARAMETER (MKL_CBWR_UNSET_ALL   = 0)

      PARAMETER (MKL_CBWR_BRANCH_OFF  = 1)
      PARAMETER (MKL_CBWR_AUTO        = 2)
      PARAMETER (MKL_CBWR_COMPATIBLE  = 3)
      PARAMETER (MKL_CBWR_SSE2        = 4)
      PARAMETER (MKL_CBWR_SSE3        = 5)
      PARAMETER (MKL_CBWR_SSSE3       = 6)
      PARAMETER (MKL_CBWR_SSE4_1      = 7)
      PARAMETER (MKL_CBWR_SSE4_2      = 8)
      PARAMETER (MKL_CBWR_AVX         = 9)
      PARAMETER (MKL_CBWR_AVX2        = 10)

      PARAMETER (MKL_CBWR_SUCCESS                 =  0)
      PARAMETER (MKL_CBWR_ERR_INVALID_SETTINGS    = -1)
      PARAMETER (MKL_CBWR_ERR_INVALID_INPUT       = -2)
      PARAMETER (MKL_CBWR_ERR_UNSUPPORTED_BRANCH  = -3)
      PARAMETER (MKL_CBWR_ERR_UNKNOWN_BRANCH      = -4)
      PARAMETER (MKL_CBWR_ERR_MODE_CHANGE_FAILURE = -8)

      PARAMETER (MKL_PEAK_MEM_DISABLE =  0)
      PARAMETER (MKL_PEAK_MEM_ENABLE  =  1)
      PARAMETER (MKL_PEAK_MEM_RESET   = -1)
      PARAMETER (MKL_PEAK_MEM         =  2)

      INTERFACE
      subroutine MKL_GET_VERSION_STRING(buf)
      character*(*) buf
      END
      END INTERFACE

      INTERFACE
      double precision function MKL_GET_CPU_FREQUENCY()
      END
      END INTERFACE

      INTERFACE
      double precision function MKL_GET_MAX_CPU_FREQUENCY()
      END
      END INTERFACE

      INTERFACE
      double precision function MKL_GET_CLOCKS_FREQUENCY()
      END
      END INTERFACE

      INTERFACE
      subroutine MKL_GET_CPU_CLOCKS(cpu_clocks)
      integer*8  cpu_clocks
      END
      END INTERFACE

! Threading control functions

      INTERFACE
      integer*4 function MKL_GET_MAX_THREADS()
      END
      END INTERFACE

      INTERFACE
      integer*4 function MKL_DOMAIN_GET_MAX_THREADS(domain)
      integer*4 domain
      END
      END INTERFACE

      INTERFACE
      integer*4 function MKL_SET_NUM_THREADS_LOCAL(nthrs)
      integer*4  nthrs
      END
      END INTERFACE

      INTERFACE
      subroutine MKL_SET_NUM_THREADS(nthrs)
      integer*4  nthrs
      END
      END INTERFACE

      INTERFACE
      integer*4 function MKL_DOMAIN_SET_NUM_THREADS(nthrs,domain)
      integer*4 nthrs
      integer*4 domain
      END
      END INTERFACE

      INTERFACE
      integer*4 function MKL_GET_DYNAMIC()
      END
      END INTERFACE

      INTERFACE
      subroutine MKL_SET_DYNAMIC(mkl_dynamic)
      integer*4 mkl_dynamic
      END
      END INTERFACE

! Memory functions

      INTERFACE
      integer*8 function MKL_MEM_STAT(n_buff)
      integer*4 n_buff
      END
      END INTERFACE

      INTERFACE
      integer*8 function MKL_PEAK_MEM_USAGE(reset)
      integer*4 reset
      END
      END INTERFACE

      INTERFACE
      subroutine MKL_FREE_BUFFERS()
      END
      END INTERFACE

      INTERFACE
      subroutine MKL_THREAD_FREE_BUFFERS()
      END
      END INTERFACE

      INTERFACE
      integer*4 function MKL_DISABLE_FAST_MM()
      END
      END INTERFACE

! MKL Progress routine

      INTERFACE
      FUNCTION MKL_PROGRESS( THREAD, STEP, STAGE )
      INTEGER*4          THREAD,STEP
      CHARACTER*(*)      STAGE
      INTEGER            MKL_PROGRESS
      END
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_ENABLE_INSTRUCTIONS(TYPE)
      INTEGER*4 TYPE
      END
      END INTERFACE

! MKL dynamic interface

      INTERFACE
      integer*4 function MKL_SET_INTERFACE_LAYER(MKL_INTERFACE)
      integer*4 MKL_INTERFACE
      END
      END INTERFACE

      INTERFACE
      integer*4 function MKL_SET_THREADING_LAYER(MKL_THREADING)
      integer*4 MKL_THREADING
      END
      END INTERFACE

! MKL CBWR functions

      INTERFACE
      integer*4 function MKL_CBWR_GET(MKL_CBWR)
      integer*4 MKL_CBWR
      END
      END INTERFACE

      INTERFACE
      integer*4 function MKL_CBWR_SET(MKL_CBWR)
      integer*4 MKL_CBWR
      END
      END INTERFACE

      INTERFACE
      integer*4 function MKL_CBWR_GET_AUTO_BRANCH()
      END
      END INTERFACE

! MKL MIC service routines

      INTEGER*4 MKL_TARGET_NONE
      INTEGER*4 MKL_TARGET_HOST
      INTEGER*4 MKL_TARGET_MIC

      INTEGER*4 MKL_MIC_DEFAULT_TARGET_TYPE
      INTEGER*4 MKL_MIC_DEFAULT_TARGET_NUMBER

      DOUBLE PRECISION MKL_MIC_AUTO_WORKDIVISION

      PARAMETER (MKL_TARGET_NONE    = 0)
      PARAMETER (MKL_TARGET_HOST    = 1)
      PARAMETER (MKL_TARGET_MIC     = 2)

      PARAMETER (MKL_MIC_DEFAULT_TARGET_TYPE    = 2)
      PARAMETER (MKL_MIC_DEFAULT_TARGET_NUMBER  = 0)

      PARAMETER (MKL_MIC_AUTO_WORKDIVISION = -1.0)

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_ENABLE()
      END
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_DISABLE()
      END
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_GET_DEVICE_COUNT()
      END
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_GET_WORKDIVISION(                      &
     &     TARGET_TYPE, TARGET_NUMBER, WD)
      INTEGER*4         TARGET_TYPE, TARGET_NUMBER
      DOUBLE PRECISION  WD
      END
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_SET_WORKDIVISION(                      &
     & TARGET_TYPE, TARGET_NUMBER, WD)
      INTEGER*4         TARGET_TYPE, TARGET_NUMBER
      DOUBLE PRECISION  WD
      END
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_SET_MAX_MEMORY(                        &
     & TARGET_TYPE, TARGET_NUMBER, MEM)
      INTEGER*4         TARGET_TYPE, TARGET_NUMBER
      INTEGER*8         MEM
      END
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_FREE_MEMORY(                           &
     & TARGET_TYPE, TARGET_NUMBER)
      INTEGER*4         TARGET_TYPE, TARGET_NUMBER
      END
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_SET_OFFLOAD_REPORT(ENABLED)
      INTEGER*4         ENABLED
      END
      END INTERFACE

      INTERFACE
      INTEGER(4) FUNCTION MKL_MIC_SET_DEVICE_NUM_THREADS(TARGET_TYPE,   &
     & TARGET_NUMBER, NUM_THREADS)
      INTEGER(4)        TARGET_TYPE, TARGET_NUMBER, NUM_THREADS
      END
      END INTERFACE

! Obsolete names

! Obsolete MKL domain names (deprecated)
      INTEGER*4 MKL_ALL
      INTEGER*4 MKL_BLAS
      INTEGER*4 MKL_FFT
      INTEGER*4 MKL_VML

      PARAMETER (MKL_ALL  = 0)
      PARAMETER (MKL_BLAS = 1)
      PARAMETER (MKL_FFT  = 2)
      PARAMETER (MKL_VML  = 3)

      INTERFACE
      subroutine MKL_SET_CPU_FREQUENCY(freq)
      double precision freq
      END
      END INTERFACE

!*******************************************************************************
